//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add Extensions\MyQuantityExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of BoeVolume.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class BoeVolumeTestsBase
    {
        protected abstract double BoeInOneBoe { get; }
        protected abstract double GigaboeInOneBoe { get; }
        protected abstract double KiloboeInOneBoe { get; }
        protected abstract double MegaboeInOneBoe { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double BoeTolerance { get { return 1e-5; } }
        protected virtual double GigaboeTolerance { get { return 1e-5; } }
        protected virtual double KiloboeTolerance { get { return 1e-5; } }
        protected virtual double MegaboeTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void BoeToBoeVolumeUnits()
        {
            BoeVolume boe = BoeVolume.FromBoe(1);
            AssertEx.EqualTolerance(BoeInOneBoe, boe.Boe, BoeTolerance);
            AssertEx.EqualTolerance(GigaboeInOneBoe, boe.Gigaboe, GigaboeTolerance);
            AssertEx.EqualTolerance(KiloboeInOneBoe, boe.Kiloboe, KiloboeTolerance);
            AssertEx.EqualTolerance(MegaboeInOneBoe, boe.Megaboe, MegaboeTolerance);
        }

        [Fact]
        public void FromValueAndUnit()
        {
            AssertEx.EqualTolerance(1, BoeVolume.From(1, BoeVolumeUnit.Boe).Boe, BoeTolerance);
            AssertEx.EqualTolerance(1, BoeVolume.From(1, BoeVolumeUnit.Gigaboe).Gigaboe, GigaboeTolerance);
            AssertEx.EqualTolerance(1, BoeVolume.From(1, BoeVolumeUnit.Kiloboe).Kiloboe, KiloboeTolerance);
            AssertEx.EqualTolerance(1, BoeVolume.From(1, BoeVolumeUnit.Megaboe).Megaboe, MegaboeTolerance);
        }

        [Fact]
        public void As()
        {
            var boe = BoeVolume.FromBoe(1);
            AssertEx.EqualTolerance(BoeInOneBoe, boe.As(BoeVolumeUnit.Boe), BoeTolerance);
            AssertEx.EqualTolerance(GigaboeInOneBoe, boe.As(BoeVolumeUnit.Gigaboe), GigaboeTolerance);
            AssertEx.EqualTolerance(KiloboeInOneBoe, boe.As(BoeVolumeUnit.Kiloboe), KiloboeTolerance);
            AssertEx.EqualTolerance(MegaboeInOneBoe, boe.As(BoeVolumeUnit.Megaboe), MegaboeTolerance);
        }

        [Fact]
        public void ToUnit()
        {
            var boe = BoeVolume.FromBoe(1);

            var boeQuantity = boe.ToUnit(BoeVolumeUnit.Boe);
            AssertEx.EqualTolerance(BoeInOneBoe, (double)boeQuantity.Value, BoeTolerance);
            Assert.Equal(BoeVolumeUnit.Boe, boeQuantity.Unit);

            var gigaboeQuantity = boe.ToUnit(BoeVolumeUnit.Gigaboe);
            AssertEx.EqualTolerance(GigaboeInOneBoe, (double)gigaboeQuantity.Value, GigaboeTolerance);
            Assert.Equal(BoeVolumeUnit.Gigaboe, gigaboeQuantity.Unit);

            var kiloboeQuantity = boe.ToUnit(BoeVolumeUnit.Kiloboe);
            AssertEx.EqualTolerance(KiloboeInOneBoe, (double)kiloboeQuantity.Value, KiloboeTolerance);
            Assert.Equal(BoeVolumeUnit.Kiloboe, kiloboeQuantity.Unit);

            var megaboeQuantity = boe.ToUnit(BoeVolumeUnit.Megaboe);
            AssertEx.EqualTolerance(MegaboeInOneBoe, (double)megaboeQuantity.Value, MegaboeTolerance);
            Assert.Equal(BoeVolumeUnit.Megaboe, megaboeQuantity.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            BoeVolume boe = BoeVolume.FromBoe(1);
            AssertEx.EqualTolerance(1, BoeVolume.FromBoe(boe.Boe).Boe, BoeTolerance);
            AssertEx.EqualTolerance(1, BoeVolume.FromGigaboe(boe.Gigaboe).Boe, GigaboeTolerance);
            AssertEx.EqualTolerance(1, BoeVolume.FromKiloboe(boe.Kiloboe).Boe, KiloboeTolerance);
            AssertEx.EqualTolerance(1, BoeVolume.FromMegaboe(boe.Megaboe).Boe, MegaboeTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            BoeVolume v = BoeVolume.FromBoe(1);
            AssertEx.EqualTolerance(-1, -v.Boe, BoeTolerance);
            AssertEx.EqualTolerance(2, (BoeVolume.FromBoe(3)-v).Boe, BoeTolerance);
            AssertEx.EqualTolerance(2, (v + v).Boe, BoeTolerance);
            AssertEx.EqualTolerance(10, (v*10).Boe, BoeTolerance);
            AssertEx.EqualTolerance(10, (10*v).Boe, BoeTolerance);
            AssertEx.EqualTolerance(2, (BoeVolume.FromBoe(10)/5).Boe, BoeTolerance);
            AssertEx.EqualTolerance(2, BoeVolume.FromBoe(10)/BoeVolume.FromBoe(5), BoeTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            BoeVolume oneBoe = BoeVolume.FromBoe(1);
            BoeVolume twoBoe = BoeVolume.FromBoe(2);

            Assert.True(oneBoe < twoBoe);
            Assert.True(oneBoe <= twoBoe);
            Assert.True(twoBoe > oneBoe);
            Assert.True(twoBoe >= oneBoe);

            Assert.False(oneBoe > twoBoe);
            Assert.False(oneBoe >= twoBoe);
            Assert.False(twoBoe < oneBoe);
            Assert.False(twoBoe <= oneBoe);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            BoeVolume boe = BoeVolume.FromBoe(1);
            Assert.Equal(0, boe.CompareTo(boe));
            Assert.True(boe.CompareTo(BoeVolume.Zero) > 0);
            Assert.True(BoeVolume.Zero.CompareTo(boe) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            BoeVolume boe = BoeVolume.FromBoe(1);
            Assert.Throws<ArgumentException>(() => boe.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            BoeVolume boe = BoeVolume.FromBoe(1);
            Assert.Throws<ArgumentNullException>(() => boe.CompareTo(null));
        }


        [Fact]
        public void EqualityOperators()
        {
            BoeVolume a = BoeVolume.FromBoe(1);
            BoeVolume b = BoeVolume.FromBoe(2);

// ReSharper disable EqualExpressionComparison
            Assert.True(a == a);
            Assert.True(a != b);

            Assert.False(a == b);
            Assert.False(a != a);
// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void EqualsIsImplemented()
        {
            BoeVolume v = BoeVolume.FromBoe(1);
            Assert.True(v.Equals(BoeVolume.FromBoe(1), BoeVolume.FromBoe(BoeTolerance)));
            Assert.False(v.Equals(BoeVolume.Zero, BoeVolume.FromBoe(BoeTolerance)));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            BoeVolume boe = BoeVolume.FromBoe(1);
            Assert.False(boe.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            BoeVolume boe = BoeVolume.FromBoe(1);
            Assert.False(boe.Equals(null));
        }
    }
}
