//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add Extensions\MyQuantityExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of LiquidVolume.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class LiquidVolumeTestsBase
    {
        protected abstract double CubicMetersInOneCubicMeter { get; }
        protected abstract double HectocubicMetersInOneCubicMeter { get; }
        protected abstract double KilocubicMetersInOneCubicMeter { get; }
        protected abstract double OilBarrelsInOneCubicMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CubicMetersTolerance { get { return 1e-5; } }
        protected virtual double HectocubicMetersTolerance { get { return 1e-5; } }
        protected virtual double KilocubicMetersTolerance { get { return 1e-5; } }
        protected virtual double OilBarrelsTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void CubicMeterToLiquidVolumeUnits()
        {
            LiquidVolume cubicmeter = LiquidVolume.FromCubicMeters(1);
            AssertEx.EqualTolerance(CubicMetersInOneCubicMeter, cubicmeter.CubicMeters, CubicMetersTolerance);
            AssertEx.EqualTolerance(HectocubicMetersInOneCubicMeter, cubicmeter.HectocubicMeters, HectocubicMetersTolerance);
            AssertEx.EqualTolerance(KilocubicMetersInOneCubicMeter, cubicmeter.KilocubicMeters, KilocubicMetersTolerance);
            AssertEx.EqualTolerance(OilBarrelsInOneCubicMeter, cubicmeter.OilBarrels, OilBarrelsTolerance);
        }

        [Fact]
        public void FromValueAndUnit()
        {
            AssertEx.EqualTolerance(1, LiquidVolume.From(1, LiquidVolumeUnit.CubicMeter).CubicMeters, CubicMetersTolerance);
            AssertEx.EqualTolerance(1, LiquidVolume.From(1, LiquidVolumeUnit.HectocubicMeter).HectocubicMeters, HectocubicMetersTolerance);
            AssertEx.EqualTolerance(1, LiquidVolume.From(1, LiquidVolumeUnit.KilocubicMeter).KilocubicMeters, KilocubicMetersTolerance);
            AssertEx.EqualTolerance(1, LiquidVolume.From(1, LiquidVolumeUnit.OilBarrel).OilBarrels, OilBarrelsTolerance);
        }

        [Fact]
        public void As()
        {
            var cubicmeter = LiquidVolume.FromCubicMeters(1);
            AssertEx.EqualTolerance(CubicMetersInOneCubicMeter, cubicmeter.As(LiquidVolumeUnit.CubicMeter), CubicMetersTolerance);
            AssertEx.EqualTolerance(HectocubicMetersInOneCubicMeter, cubicmeter.As(LiquidVolumeUnit.HectocubicMeter), HectocubicMetersTolerance);
            AssertEx.EqualTolerance(KilocubicMetersInOneCubicMeter, cubicmeter.As(LiquidVolumeUnit.KilocubicMeter), KilocubicMetersTolerance);
            AssertEx.EqualTolerance(OilBarrelsInOneCubicMeter, cubicmeter.As(LiquidVolumeUnit.OilBarrel), OilBarrelsTolerance);
        }

        [Fact]
        public void ToUnit()
        {
            var cubicmeter = LiquidVolume.FromCubicMeters(1);

            var cubicmeterQuantity = cubicmeter.ToUnit(LiquidVolumeUnit.CubicMeter);
            AssertEx.EqualTolerance(CubicMetersInOneCubicMeter, (double)cubicmeterQuantity.Value, CubicMetersTolerance);
            Assert.Equal(LiquidVolumeUnit.CubicMeter, cubicmeterQuantity.Unit);

            var hectocubicmeterQuantity = cubicmeter.ToUnit(LiquidVolumeUnit.HectocubicMeter);
            AssertEx.EqualTolerance(HectocubicMetersInOneCubicMeter, (double)hectocubicmeterQuantity.Value, HectocubicMetersTolerance);
            Assert.Equal(LiquidVolumeUnit.HectocubicMeter, hectocubicmeterQuantity.Unit);

            var kilocubicmeterQuantity = cubicmeter.ToUnit(LiquidVolumeUnit.KilocubicMeter);
            AssertEx.EqualTolerance(KilocubicMetersInOneCubicMeter, (double)kilocubicmeterQuantity.Value, KilocubicMetersTolerance);
            Assert.Equal(LiquidVolumeUnit.KilocubicMeter, kilocubicmeterQuantity.Unit);

            var oilbarrelQuantity = cubicmeter.ToUnit(LiquidVolumeUnit.OilBarrel);
            AssertEx.EqualTolerance(OilBarrelsInOneCubicMeter, (double)oilbarrelQuantity.Value, OilBarrelsTolerance);
            Assert.Equal(LiquidVolumeUnit.OilBarrel, oilbarrelQuantity.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            LiquidVolume cubicmeter = LiquidVolume.FromCubicMeters(1);
            AssertEx.EqualTolerance(1, LiquidVolume.FromCubicMeters(cubicmeter.CubicMeters).CubicMeters, CubicMetersTolerance);
            AssertEx.EqualTolerance(1, LiquidVolume.FromHectocubicMeters(cubicmeter.HectocubicMeters).CubicMeters, HectocubicMetersTolerance);
            AssertEx.EqualTolerance(1, LiquidVolume.FromKilocubicMeters(cubicmeter.KilocubicMeters).CubicMeters, KilocubicMetersTolerance);
            AssertEx.EqualTolerance(1, LiquidVolume.FromOilBarrels(cubicmeter.OilBarrels).CubicMeters, OilBarrelsTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            LiquidVolume v = LiquidVolume.FromCubicMeters(1);
            AssertEx.EqualTolerance(-1, -v.CubicMeters, CubicMetersTolerance);
            AssertEx.EqualTolerance(2, (LiquidVolume.FromCubicMeters(3)-v).CubicMeters, CubicMetersTolerance);
            AssertEx.EqualTolerance(2, (v + v).CubicMeters, CubicMetersTolerance);
            AssertEx.EqualTolerance(10, (v*10).CubicMeters, CubicMetersTolerance);
            AssertEx.EqualTolerance(10, (10*v).CubicMeters, CubicMetersTolerance);
            AssertEx.EqualTolerance(2, (LiquidVolume.FromCubicMeters(10)/5).CubicMeters, CubicMetersTolerance);
            AssertEx.EqualTolerance(2, LiquidVolume.FromCubicMeters(10)/LiquidVolume.FromCubicMeters(5), CubicMetersTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            LiquidVolume oneCubicMeter = LiquidVolume.FromCubicMeters(1);
            LiquidVolume twoCubicMeters = LiquidVolume.FromCubicMeters(2);

            Assert.True(oneCubicMeter < twoCubicMeters);
            Assert.True(oneCubicMeter <= twoCubicMeters);
            Assert.True(twoCubicMeters > oneCubicMeter);
            Assert.True(twoCubicMeters >= oneCubicMeter);

            Assert.False(oneCubicMeter > twoCubicMeters);
            Assert.False(oneCubicMeter >= twoCubicMeters);
            Assert.False(twoCubicMeters < oneCubicMeter);
            Assert.False(twoCubicMeters <= oneCubicMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            LiquidVolume cubicmeter = LiquidVolume.FromCubicMeters(1);
            Assert.Equal(0, cubicmeter.CompareTo(cubicmeter));
            Assert.True(cubicmeter.CompareTo(LiquidVolume.Zero) > 0);
            Assert.True(LiquidVolume.Zero.CompareTo(cubicmeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            LiquidVolume cubicmeter = LiquidVolume.FromCubicMeters(1);
            Assert.Throws<ArgumentException>(() => cubicmeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            LiquidVolume cubicmeter = LiquidVolume.FromCubicMeters(1);
            Assert.Throws<ArgumentNullException>(() => cubicmeter.CompareTo(null));
        }


        [Fact]
        public void EqualityOperators()
        {
            LiquidVolume a = LiquidVolume.FromCubicMeters(1);
            LiquidVolume b = LiquidVolume.FromCubicMeters(2);

// ReSharper disable EqualExpressionComparison
            Assert.True(a == a);
            Assert.True(a != b);

            Assert.False(a == b);
            Assert.False(a != a);
// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void EqualsIsImplemented()
        {
            LiquidVolume v = LiquidVolume.FromCubicMeters(1);
            Assert.True(v.Equals(LiquidVolume.FromCubicMeters(1), LiquidVolume.FromCubicMeters(CubicMetersTolerance)));
            Assert.False(v.Equals(LiquidVolume.Zero, LiquidVolume.FromCubicMeters(CubicMetersTolerance)));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            LiquidVolume cubicmeter = LiquidVolume.FromCubicMeters(1);
            Assert.False(cubicmeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            LiquidVolume cubicmeter = LiquidVolume.FromCubicMeters(1);
            Assert.False(cubicmeter.Equals(null));
        }
    }
}
