//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add Extensions\MyQuantityExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of LiquidRate.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class LiquidRateTestsBase
    {
        protected abstract double CubicMetersPerDayInOneCubicMeterPerDay { get; }
        protected abstract double HectocubicMetersPerDayInOneCubicMeterPerDay { get; }
        protected abstract double KilocubicMetersPerDayInOneCubicMeterPerDay { get; }
        protected abstract double OilBarrelsPerDayInOneCubicMeterPerDay { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CubicMetersPerDayTolerance { get { return 1e-5; } }
        protected virtual double HectocubicMetersPerDayTolerance { get { return 1e-5; } }
        protected virtual double KilocubicMetersPerDayTolerance { get { return 1e-5; } }
        protected virtual double OilBarrelsPerDayTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void CubicMeterPerDayToLiquidRateUnits()
        {
            LiquidRate cubicmeterperday = LiquidRate.FromCubicMetersPerDay(1);
            AssertEx.EqualTolerance(CubicMetersPerDayInOneCubicMeterPerDay, cubicmeterperday.CubicMetersPerDay, CubicMetersPerDayTolerance);
            AssertEx.EqualTolerance(HectocubicMetersPerDayInOneCubicMeterPerDay, cubicmeterperday.HectocubicMetersPerDay, HectocubicMetersPerDayTolerance);
            AssertEx.EqualTolerance(KilocubicMetersPerDayInOneCubicMeterPerDay, cubicmeterperday.KilocubicMetersPerDay, KilocubicMetersPerDayTolerance);
            AssertEx.EqualTolerance(OilBarrelsPerDayInOneCubicMeterPerDay, cubicmeterperday.OilBarrelsPerDay, OilBarrelsPerDayTolerance);
        }

        [Fact]
        public void FromValueAndUnit()
        {
            AssertEx.EqualTolerance(1, LiquidRate.From(1, LiquidRateUnit.CubicMeterPerDay).CubicMetersPerDay, CubicMetersPerDayTolerance);
            AssertEx.EqualTolerance(1, LiquidRate.From(1, LiquidRateUnit.HectocubicMeterPerDay).HectocubicMetersPerDay, HectocubicMetersPerDayTolerance);
            AssertEx.EqualTolerance(1, LiquidRate.From(1, LiquidRateUnit.KilocubicMeterPerDay).KilocubicMetersPerDay, KilocubicMetersPerDayTolerance);
            AssertEx.EqualTolerance(1, LiquidRate.From(1, LiquidRateUnit.OilBarrelsPerDay).OilBarrelsPerDay, OilBarrelsPerDayTolerance);
        }

        [Fact]
        public void As()
        {
            var cubicmeterperday = LiquidRate.FromCubicMetersPerDay(1);
            AssertEx.EqualTolerance(CubicMetersPerDayInOneCubicMeterPerDay, cubicmeterperday.As(LiquidRateUnit.CubicMeterPerDay), CubicMetersPerDayTolerance);
            AssertEx.EqualTolerance(HectocubicMetersPerDayInOneCubicMeterPerDay, cubicmeterperday.As(LiquidRateUnit.HectocubicMeterPerDay), HectocubicMetersPerDayTolerance);
            AssertEx.EqualTolerance(KilocubicMetersPerDayInOneCubicMeterPerDay, cubicmeterperday.As(LiquidRateUnit.KilocubicMeterPerDay), KilocubicMetersPerDayTolerance);
            AssertEx.EqualTolerance(OilBarrelsPerDayInOneCubicMeterPerDay, cubicmeterperday.As(LiquidRateUnit.OilBarrelsPerDay), OilBarrelsPerDayTolerance);
        }

        [Fact]
        public void ToUnit()
        {
            var cubicmeterperday = LiquidRate.FromCubicMetersPerDay(1);

            var cubicmeterperdayQuantity = cubicmeterperday.ToUnit(LiquidRateUnit.CubicMeterPerDay);
            AssertEx.EqualTolerance(CubicMetersPerDayInOneCubicMeterPerDay, (double)cubicmeterperdayQuantity.Value, CubicMetersPerDayTolerance);
            Assert.Equal(LiquidRateUnit.CubicMeterPerDay, cubicmeterperdayQuantity.Unit);

            var hectocubicmeterperdayQuantity = cubicmeterperday.ToUnit(LiquidRateUnit.HectocubicMeterPerDay);
            AssertEx.EqualTolerance(HectocubicMetersPerDayInOneCubicMeterPerDay, (double)hectocubicmeterperdayQuantity.Value, HectocubicMetersPerDayTolerance);
            Assert.Equal(LiquidRateUnit.HectocubicMeterPerDay, hectocubicmeterperdayQuantity.Unit);

            var kilocubicmeterperdayQuantity = cubicmeterperday.ToUnit(LiquidRateUnit.KilocubicMeterPerDay);
            AssertEx.EqualTolerance(KilocubicMetersPerDayInOneCubicMeterPerDay, (double)kilocubicmeterperdayQuantity.Value, KilocubicMetersPerDayTolerance);
            Assert.Equal(LiquidRateUnit.KilocubicMeterPerDay, kilocubicmeterperdayQuantity.Unit);

            var oilbarrelsperdayQuantity = cubicmeterperday.ToUnit(LiquidRateUnit.OilBarrelsPerDay);
            AssertEx.EqualTolerance(OilBarrelsPerDayInOneCubicMeterPerDay, (double)oilbarrelsperdayQuantity.Value, OilBarrelsPerDayTolerance);
            Assert.Equal(LiquidRateUnit.OilBarrelsPerDay, oilbarrelsperdayQuantity.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            LiquidRate cubicmeterperday = LiquidRate.FromCubicMetersPerDay(1);
            AssertEx.EqualTolerance(1, LiquidRate.FromCubicMetersPerDay(cubicmeterperday.CubicMetersPerDay).CubicMetersPerDay, CubicMetersPerDayTolerance);
            AssertEx.EqualTolerance(1, LiquidRate.FromHectocubicMetersPerDay(cubicmeterperday.HectocubicMetersPerDay).CubicMetersPerDay, HectocubicMetersPerDayTolerance);
            AssertEx.EqualTolerance(1, LiquidRate.FromKilocubicMetersPerDay(cubicmeterperday.KilocubicMetersPerDay).CubicMetersPerDay, KilocubicMetersPerDayTolerance);
            AssertEx.EqualTolerance(1, LiquidRate.FromOilBarrelsPerDay(cubicmeterperday.OilBarrelsPerDay).CubicMetersPerDay, OilBarrelsPerDayTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            LiquidRate v = LiquidRate.FromCubicMetersPerDay(1);
            AssertEx.EqualTolerance(-1, -v.CubicMetersPerDay, CubicMetersPerDayTolerance);
            AssertEx.EqualTolerance(2, (LiquidRate.FromCubicMetersPerDay(3)-v).CubicMetersPerDay, CubicMetersPerDayTolerance);
            AssertEx.EqualTolerance(2, (v + v).CubicMetersPerDay, CubicMetersPerDayTolerance);
            AssertEx.EqualTolerance(10, (v*10).CubicMetersPerDay, CubicMetersPerDayTolerance);
            AssertEx.EqualTolerance(10, (10*v).CubicMetersPerDay, CubicMetersPerDayTolerance);
            AssertEx.EqualTolerance(2, (LiquidRate.FromCubicMetersPerDay(10)/5).CubicMetersPerDay, CubicMetersPerDayTolerance);
            AssertEx.EqualTolerance(2, LiquidRate.FromCubicMetersPerDay(10)/LiquidRate.FromCubicMetersPerDay(5), CubicMetersPerDayTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            LiquidRate oneCubicMeterPerDay = LiquidRate.FromCubicMetersPerDay(1);
            LiquidRate twoCubicMetersPerDay = LiquidRate.FromCubicMetersPerDay(2);

            Assert.True(oneCubicMeterPerDay < twoCubicMetersPerDay);
            Assert.True(oneCubicMeterPerDay <= twoCubicMetersPerDay);
            Assert.True(twoCubicMetersPerDay > oneCubicMeterPerDay);
            Assert.True(twoCubicMetersPerDay >= oneCubicMeterPerDay);

            Assert.False(oneCubicMeterPerDay > twoCubicMetersPerDay);
            Assert.False(oneCubicMeterPerDay >= twoCubicMetersPerDay);
            Assert.False(twoCubicMetersPerDay < oneCubicMeterPerDay);
            Assert.False(twoCubicMetersPerDay <= oneCubicMeterPerDay);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            LiquidRate cubicmeterperday = LiquidRate.FromCubicMetersPerDay(1);
            Assert.Equal(0, cubicmeterperday.CompareTo(cubicmeterperday));
            Assert.True(cubicmeterperday.CompareTo(LiquidRate.Zero) > 0);
            Assert.True(LiquidRate.Zero.CompareTo(cubicmeterperday) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            LiquidRate cubicmeterperday = LiquidRate.FromCubicMetersPerDay(1);
            Assert.Throws<ArgumentException>(() => cubicmeterperday.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            LiquidRate cubicmeterperday = LiquidRate.FromCubicMetersPerDay(1);
            Assert.Throws<ArgumentNullException>(() => cubicmeterperday.CompareTo(null));
        }


        [Fact]
        public void EqualityOperators()
        {
            LiquidRate a = LiquidRate.FromCubicMetersPerDay(1);
            LiquidRate b = LiquidRate.FromCubicMetersPerDay(2);

// ReSharper disable EqualExpressionComparison
            Assert.True(a == a);
            Assert.True(a != b);

            Assert.False(a == b);
            Assert.False(a != a);
// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void EqualsIsImplemented()
        {
            LiquidRate v = LiquidRate.FromCubicMetersPerDay(1);
            Assert.True(v.Equals(LiquidRate.FromCubicMetersPerDay(1), LiquidRate.FromCubicMetersPerDay(CubicMetersPerDayTolerance)));
            Assert.False(v.Equals(LiquidRate.Zero, LiquidRate.FromCubicMetersPerDay(CubicMetersPerDayTolerance)));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            LiquidRate cubicmeterperday = LiquidRate.FromCubicMetersPerDay(1);
            Assert.False(cubicmeterperday.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            LiquidRate cubicmeterperday = LiquidRate.FromCubicMetersPerDay(1);
            Assert.False(cubicmeterperday.Equals(null));
        }
    }
}
