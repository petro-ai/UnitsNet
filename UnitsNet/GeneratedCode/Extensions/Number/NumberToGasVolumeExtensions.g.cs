//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add Extensions\MyQuantityExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;

// Windows Runtime Component does not support extension methods and method overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
namespace UnitsNet.Extensions.NumberToGasVolume
{
    public static class NumberToGasVolumeExtensions
    {
        #region BillionCubicFoot

        /// <inheritdoc cref="GasVolume.FromBillionCubicFeet(UnitsNet.QuantityValue)" />
        public static GasVolume BillionCubicFeet(this int value) => GasVolume.FromBillionCubicFeet(value);

        /// <inheritdoc cref="GasVolume.FromBillionCubicFeet(UnitsNet.QuantityValue)" />
        public static GasVolume? BillionCubicFeet(this int? value) => GasVolume.FromBillionCubicFeet(value);

        /// <inheritdoc cref="GasVolume.FromBillionCubicFeet(UnitsNet.QuantityValue)" />
        public static GasVolume BillionCubicFeet(this long value) => GasVolume.FromBillionCubicFeet(value);

        /// <inheritdoc cref="GasVolume.FromBillionCubicFeet(UnitsNet.QuantityValue)" />
        public static GasVolume? BillionCubicFeet(this long? value) => GasVolume.FromBillionCubicFeet(value);

        /// <inheritdoc cref="GasVolume.FromBillionCubicFeet(UnitsNet.QuantityValue)" />
        public static GasVolume BillionCubicFeet(this double value) => GasVolume.FromBillionCubicFeet(value);

        /// <inheritdoc cref="GasVolume.FromBillionCubicFeet(UnitsNet.QuantityValue)" />
        public static GasVolume? BillionCubicFeet(this double? value) => GasVolume.FromBillionCubicFeet(value);

        /// <inheritdoc cref="GasVolume.FromBillionCubicFeet(UnitsNet.QuantityValue)" />
        public static GasVolume BillionCubicFeet(this float value) => GasVolume.FromBillionCubicFeet(value);

        /// <inheritdoc cref="GasVolume.FromBillionCubicFeet(UnitsNet.QuantityValue)" />
        public static GasVolume? BillionCubicFeet(this float? value) => GasVolume.FromBillionCubicFeet(value);

        /// <inheritdoc cref="GasVolume.FromBillionCubicFeet(UnitsNet.QuantityValue)" />
        public static GasVolume BillionCubicFeet(this decimal value) => GasVolume.FromBillionCubicFeet(Convert.ToDouble(value));

        /// <inheritdoc cref="GasVolume.FromBillionCubicFeet(UnitsNet.QuantityValue)" />
        public static GasVolume? BillionCubicFeet(this decimal? value) => GasVolume.FromBillionCubicFeet(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region CubicFoot

        /// <inheritdoc cref="GasVolume.FromCubicFeet(UnitsNet.QuantityValue)" />
        public static GasVolume CubicFeet(this int value) => GasVolume.FromCubicFeet(value);

        /// <inheritdoc cref="GasVolume.FromCubicFeet(UnitsNet.QuantityValue)" />
        public static GasVolume? CubicFeet(this int? value) => GasVolume.FromCubicFeet(value);

        /// <inheritdoc cref="GasVolume.FromCubicFeet(UnitsNet.QuantityValue)" />
        public static GasVolume CubicFeet(this long value) => GasVolume.FromCubicFeet(value);

        /// <inheritdoc cref="GasVolume.FromCubicFeet(UnitsNet.QuantityValue)" />
        public static GasVolume? CubicFeet(this long? value) => GasVolume.FromCubicFeet(value);

        /// <inheritdoc cref="GasVolume.FromCubicFeet(UnitsNet.QuantityValue)" />
        public static GasVolume CubicFeet(this double value) => GasVolume.FromCubicFeet(value);

        /// <inheritdoc cref="GasVolume.FromCubicFeet(UnitsNet.QuantityValue)" />
        public static GasVolume? CubicFeet(this double? value) => GasVolume.FromCubicFeet(value);

        /// <inheritdoc cref="GasVolume.FromCubicFeet(UnitsNet.QuantityValue)" />
        public static GasVolume CubicFeet(this float value) => GasVolume.FromCubicFeet(value);

        /// <inheritdoc cref="GasVolume.FromCubicFeet(UnitsNet.QuantityValue)" />
        public static GasVolume? CubicFeet(this float? value) => GasVolume.FromCubicFeet(value);

        /// <inheritdoc cref="GasVolume.FromCubicFeet(UnitsNet.QuantityValue)" />
        public static GasVolume CubicFeet(this decimal value) => GasVolume.FromCubicFeet(Convert.ToDouble(value));

        /// <inheritdoc cref="GasVolume.FromCubicFeet(UnitsNet.QuantityValue)" />
        public static GasVolume? CubicFeet(this decimal? value) => GasVolume.FromCubicFeet(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region CubicKiloMeter

        /// <inheritdoc cref="GasVolume.FromCubicKiloMeters(UnitsNet.QuantityValue)" />
        public static GasVolume CubicKiloMeters(this int value) => GasVolume.FromCubicKiloMeters(value);

        /// <inheritdoc cref="GasVolume.FromCubicKiloMeters(UnitsNet.QuantityValue)" />
        public static GasVolume? CubicKiloMeters(this int? value) => GasVolume.FromCubicKiloMeters(value);

        /// <inheritdoc cref="GasVolume.FromCubicKiloMeters(UnitsNet.QuantityValue)" />
        public static GasVolume CubicKiloMeters(this long value) => GasVolume.FromCubicKiloMeters(value);

        /// <inheritdoc cref="GasVolume.FromCubicKiloMeters(UnitsNet.QuantityValue)" />
        public static GasVolume? CubicKiloMeters(this long? value) => GasVolume.FromCubicKiloMeters(value);

        /// <inheritdoc cref="GasVolume.FromCubicKiloMeters(UnitsNet.QuantityValue)" />
        public static GasVolume CubicKiloMeters(this double value) => GasVolume.FromCubicKiloMeters(value);

        /// <inheritdoc cref="GasVolume.FromCubicKiloMeters(UnitsNet.QuantityValue)" />
        public static GasVolume? CubicKiloMeters(this double? value) => GasVolume.FromCubicKiloMeters(value);

        /// <inheritdoc cref="GasVolume.FromCubicKiloMeters(UnitsNet.QuantityValue)" />
        public static GasVolume CubicKiloMeters(this float value) => GasVolume.FromCubicKiloMeters(value);

        /// <inheritdoc cref="GasVolume.FromCubicKiloMeters(UnitsNet.QuantityValue)" />
        public static GasVolume? CubicKiloMeters(this float? value) => GasVolume.FromCubicKiloMeters(value);

        /// <inheritdoc cref="GasVolume.FromCubicKiloMeters(UnitsNet.QuantityValue)" />
        public static GasVolume CubicKiloMeters(this decimal value) => GasVolume.FromCubicKiloMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="GasVolume.FromCubicKiloMeters(UnitsNet.QuantityValue)" />
        public static GasVolume? CubicKiloMeters(this decimal? value) => GasVolume.FromCubicKiloMeters(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region CubicMeter

        /// <inheritdoc cref="GasVolume.FromCubicMeters(UnitsNet.QuantityValue)" />
        public static GasVolume CubicMeters(this int value) => GasVolume.FromCubicMeters(value);

        /// <inheritdoc cref="GasVolume.FromCubicMeters(UnitsNet.QuantityValue)" />
        public static GasVolume? CubicMeters(this int? value) => GasVolume.FromCubicMeters(value);

        /// <inheritdoc cref="GasVolume.FromCubicMeters(UnitsNet.QuantityValue)" />
        public static GasVolume CubicMeters(this long value) => GasVolume.FromCubicMeters(value);

        /// <inheritdoc cref="GasVolume.FromCubicMeters(UnitsNet.QuantityValue)" />
        public static GasVolume? CubicMeters(this long? value) => GasVolume.FromCubicMeters(value);

        /// <inheritdoc cref="GasVolume.FromCubicMeters(UnitsNet.QuantityValue)" />
        public static GasVolume CubicMeters(this double value) => GasVolume.FromCubicMeters(value);

        /// <inheritdoc cref="GasVolume.FromCubicMeters(UnitsNet.QuantityValue)" />
        public static GasVolume? CubicMeters(this double? value) => GasVolume.FromCubicMeters(value);

        /// <inheritdoc cref="GasVolume.FromCubicMeters(UnitsNet.QuantityValue)" />
        public static GasVolume CubicMeters(this float value) => GasVolume.FromCubicMeters(value);

        /// <inheritdoc cref="GasVolume.FromCubicMeters(UnitsNet.QuantityValue)" />
        public static GasVolume? CubicMeters(this float? value) => GasVolume.FromCubicMeters(value);

        /// <inheritdoc cref="GasVolume.FromCubicMeters(UnitsNet.QuantityValue)" />
        public static GasVolume CubicMeters(this decimal value) => GasVolume.FromCubicMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="GasVolume.FromCubicMeters(UnitsNet.QuantityValue)" />
        public static GasVolume? CubicMeters(this decimal? value) => GasVolume.FromCubicMeters(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region HectocubicMeter

        /// <inheritdoc cref="GasVolume.FromHectocubicMeters(UnitsNet.QuantityValue)" />
        public static GasVolume HectocubicMeters(this int value) => GasVolume.FromHectocubicMeters(value);

        /// <inheritdoc cref="GasVolume.FromHectocubicMeters(UnitsNet.QuantityValue)" />
        public static GasVolume? HectocubicMeters(this int? value) => GasVolume.FromHectocubicMeters(value);

        /// <inheritdoc cref="GasVolume.FromHectocubicMeters(UnitsNet.QuantityValue)" />
        public static GasVolume HectocubicMeters(this long value) => GasVolume.FromHectocubicMeters(value);

        /// <inheritdoc cref="GasVolume.FromHectocubicMeters(UnitsNet.QuantityValue)" />
        public static GasVolume? HectocubicMeters(this long? value) => GasVolume.FromHectocubicMeters(value);

        /// <inheritdoc cref="GasVolume.FromHectocubicMeters(UnitsNet.QuantityValue)" />
        public static GasVolume HectocubicMeters(this double value) => GasVolume.FromHectocubicMeters(value);

        /// <inheritdoc cref="GasVolume.FromHectocubicMeters(UnitsNet.QuantityValue)" />
        public static GasVolume? HectocubicMeters(this double? value) => GasVolume.FromHectocubicMeters(value);

        /// <inheritdoc cref="GasVolume.FromHectocubicMeters(UnitsNet.QuantityValue)" />
        public static GasVolume HectocubicMeters(this float value) => GasVolume.FromHectocubicMeters(value);

        /// <inheritdoc cref="GasVolume.FromHectocubicMeters(UnitsNet.QuantityValue)" />
        public static GasVolume? HectocubicMeters(this float? value) => GasVolume.FromHectocubicMeters(value);

        /// <inheritdoc cref="GasVolume.FromHectocubicMeters(UnitsNet.QuantityValue)" />
        public static GasVolume HectocubicMeters(this decimal value) => GasVolume.FromHectocubicMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="GasVolume.FromHectocubicMeters(UnitsNet.QuantityValue)" />
        public static GasVolume? HectocubicMeters(this decimal? value) => GasVolume.FromHectocubicMeters(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region KilocubicMeter

        /// <inheritdoc cref="GasVolume.FromKilocubicMeters(UnitsNet.QuantityValue)" />
        public static GasVolume KilocubicMeters(this int value) => GasVolume.FromKilocubicMeters(value);

        /// <inheritdoc cref="GasVolume.FromKilocubicMeters(UnitsNet.QuantityValue)" />
        public static GasVolume? KilocubicMeters(this int? value) => GasVolume.FromKilocubicMeters(value);

        /// <inheritdoc cref="GasVolume.FromKilocubicMeters(UnitsNet.QuantityValue)" />
        public static GasVolume KilocubicMeters(this long value) => GasVolume.FromKilocubicMeters(value);

        /// <inheritdoc cref="GasVolume.FromKilocubicMeters(UnitsNet.QuantityValue)" />
        public static GasVolume? KilocubicMeters(this long? value) => GasVolume.FromKilocubicMeters(value);

        /// <inheritdoc cref="GasVolume.FromKilocubicMeters(UnitsNet.QuantityValue)" />
        public static GasVolume KilocubicMeters(this double value) => GasVolume.FromKilocubicMeters(value);

        /// <inheritdoc cref="GasVolume.FromKilocubicMeters(UnitsNet.QuantityValue)" />
        public static GasVolume? KilocubicMeters(this double? value) => GasVolume.FromKilocubicMeters(value);

        /// <inheritdoc cref="GasVolume.FromKilocubicMeters(UnitsNet.QuantityValue)" />
        public static GasVolume KilocubicMeters(this float value) => GasVolume.FromKilocubicMeters(value);

        /// <inheritdoc cref="GasVolume.FromKilocubicMeters(UnitsNet.QuantityValue)" />
        public static GasVolume? KilocubicMeters(this float? value) => GasVolume.FromKilocubicMeters(value);

        /// <inheritdoc cref="GasVolume.FromKilocubicMeters(UnitsNet.QuantityValue)" />
        public static GasVolume KilocubicMeters(this decimal value) => GasVolume.FromKilocubicMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="GasVolume.FromKilocubicMeters(UnitsNet.QuantityValue)" />
        public static GasVolume? KilocubicMeters(this decimal? value) => GasVolume.FromKilocubicMeters(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region MillionCubicFoot

        /// <inheritdoc cref="GasVolume.FromMillionCubicFeet(UnitsNet.QuantityValue)" />
        public static GasVolume MillionCubicFeet(this int value) => GasVolume.FromMillionCubicFeet(value);

        /// <inheritdoc cref="GasVolume.FromMillionCubicFeet(UnitsNet.QuantityValue)" />
        public static GasVolume? MillionCubicFeet(this int? value) => GasVolume.FromMillionCubicFeet(value);

        /// <inheritdoc cref="GasVolume.FromMillionCubicFeet(UnitsNet.QuantityValue)" />
        public static GasVolume MillionCubicFeet(this long value) => GasVolume.FromMillionCubicFeet(value);

        /// <inheritdoc cref="GasVolume.FromMillionCubicFeet(UnitsNet.QuantityValue)" />
        public static GasVolume? MillionCubicFeet(this long? value) => GasVolume.FromMillionCubicFeet(value);

        /// <inheritdoc cref="GasVolume.FromMillionCubicFeet(UnitsNet.QuantityValue)" />
        public static GasVolume MillionCubicFeet(this double value) => GasVolume.FromMillionCubicFeet(value);

        /// <inheritdoc cref="GasVolume.FromMillionCubicFeet(UnitsNet.QuantityValue)" />
        public static GasVolume? MillionCubicFeet(this double? value) => GasVolume.FromMillionCubicFeet(value);

        /// <inheritdoc cref="GasVolume.FromMillionCubicFeet(UnitsNet.QuantityValue)" />
        public static GasVolume MillionCubicFeet(this float value) => GasVolume.FromMillionCubicFeet(value);

        /// <inheritdoc cref="GasVolume.FromMillionCubicFeet(UnitsNet.QuantityValue)" />
        public static GasVolume? MillionCubicFeet(this float? value) => GasVolume.FromMillionCubicFeet(value);

        /// <inheritdoc cref="GasVolume.FromMillionCubicFeet(UnitsNet.QuantityValue)" />
        public static GasVolume MillionCubicFeet(this decimal value) => GasVolume.FromMillionCubicFeet(Convert.ToDouble(value));

        /// <inheritdoc cref="GasVolume.FromMillionCubicFeet(UnitsNet.QuantityValue)" />
        public static GasVolume? MillionCubicFeet(this decimal? value) => GasVolume.FromMillionCubicFeet(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region ThousandCubicFoot

        /// <inheritdoc cref="GasVolume.FromThousandCubicFeet(UnitsNet.QuantityValue)" />
        public static GasVolume ThousandCubicFeet(this int value) => GasVolume.FromThousandCubicFeet(value);

        /// <inheritdoc cref="GasVolume.FromThousandCubicFeet(UnitsNet.QuantityValue)" />
        public static GasVolume? ThousandCubicFeet(this int? value) => GasVolume.FromThousandCubicFeet(value);

        /// <inheritdoc cref="GasVolume.FromThousandCubicFeet(UnitsNet.QuantityValue)" />
        public static GasVolume ThousandCubicFeet(this long value) => GasVolume.FromThousandCubicFeet(value);

        /// <inheritdoc cref="GasVolume.FromThousandCubicFeet(UnitsNet.QuantityValue)" />
        public static GasVolume? ThousandCubicFeet(this long? value) => GasVolume.FromThousandCubicFeet(value);

        /// <inheritdoc cref="GasVolume.FromThousandCubicFeet(UnitsNet.QuantityValue)" />
        public static GasVolume ThousandCubicFeet(this double value) => GasVolume.FromThousandCubicFeet(value);

        /// <inheritdoc cref="GasVolume.FromThousandCubicFeet(UnitsNet.QuantityValue)" />
        public static GasVolume? ThousandCubicFeet(this double? value) => GasVolume.FromThousandCubicFeet(value);

        /// <inheritdoc cref="GasVolume.FromThousandCubicFeet(UnitsNet.QuantityValue)" />
        public static GasVolume ThousandCubicFeet(this float value) => GasVolume.FromThousandCubicFeet(value);

        /// <inheritdoc cref="GasVolume.FromThousandCubicFeet(UnitsNet.QuantityValue)" />
        public static GasVolume? ThousandCubicFeet(this float? value) => GasVolume.FromThousandCubicFeet(value);

        /// <inheritdoc cref="GasVolume.FromThousandCubicFeet(UnitsNet.QuantityValue)" />
        public static GasVolume ThousandCubicFeet(this decimal value) => GasVolume.FromThousandCubicFeet(Convert.ToDouble(value));

        /// <inheritdoc cref="GasVolume.FromThousandCubicFeet(UnitsNet.QuantityValue)" />
        public static GasVolume? ThousandCubicFeet(this decimal? value) => GasVolume.FromThousandCubicFeet(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

    }
}
#endif
