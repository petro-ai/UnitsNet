//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add Extensions\MyQuantityExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;

// Windows Runtime Component does not support extension methods and method overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
namespace UnitsNet.Extensions.NumberToGasRate
{
    public static class NumberToGasRateExtensions
    {
        #region CubicFoot

        /// <inheritdoc cref="GasRate.FromCubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate CubicFeet(this int value) => GasRate.FromCubicFeet(value);

        /// <inheritdoc cref="GasRate.FromCubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate? CubicFeet(this int? value) => GasRate.FromCubicFeet(value);

        /// <inheritdoc cref="GasRate.FromCubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate CubicFeet(this long value) => GasRate.FromCubicFeet(value);

        /// <inheritdoc cref="GasRate.FromCubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate? CubicFeet(this long? value) => GasRate.FromCubicFeet(value);

        /// <inheritdoc cref="GasRate.FromCubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate CubicFeet(this double value) => GasRate.FromCubicFeet(value);

        /// <inheritdoc cref="GasRate.FromCubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate? CubicFeet(this double? value) => GasRate.FromCubicFeet(value);

        /// <inheritdoc cref="GasRate.FromCubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate CubicFeet(this float value) => GasRate.FromCubicFeet(value);

        /// <inheritdoc cref="GasRate.FromCubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate? CubicFeet(this float? value) => GasRate.FromCubicFeet(value);

        /// <inheritdoc cref="GasRate.FromCubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate CubicFeet(this decimal value) => GasRate.FromCubicFeet(Convert.ToDouble(value));

        /// <inheritdoc cref="GasRate.FromCubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate? CubicFeet(this decimal? value) => GasRate.FromCubicFeet(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region CubicMeterPerDay

        /// <inheritdoc cref="GasRate.FromCubicMetersPerDay(UnitsNet.QuantityValue)" />
        public static GasRate CubicMetersPerDay(this int value) => GasRate.FromCubicMetersPerDay(value);

        /// <inheritdoc cref="GasRate.FromCubicMetersPerDay(UnitsNet.QuantityValue)" />
        public static GasRate? CubicMetersPerDay(this int? value) => GasRate.FromCubicMetersPerDay(value);

        /// <inheritdoc cref="GasRate.FromCubicMetersPerDay(UnitsNet.QuantityValue)" />
        public static GasRate CubicMetersPerDay(this long value) => GasRate.FromCubicMetersPerDay(value);

        /// <inheritdoc cref="GasRate.FromCubicMetersPerDay(UnitsNet.QuantityValue)" />
        public static GasRate? CubicMetersPerDay(this long? value) => GasRate.FromCubicMetersPerDay(value);

        /// <inheritdoc cref="GasRate.FromCubicMetersPerDay(UnitsNet.QuantityValue)" />
        public static GasRate CubicMetersPerDay(this double value) => GasRate.FromCubicMetersPerDay(value);

        /// <inheritdoc cref="GasRate.FromCubicMetersPerDay(UnitsNet.QuantityValue)" />
        public static GasRate? CubicMetersPerDay(this double? value) => GasRate.FromCubicMetersPerDay(value);

        /// <inheritdoc cref="GasRate.FromCubicMetersPerDay(UnitsNet.QuantityValue)" />
        public static GasRate CubicMetersPerDay(this float value) => GasRate.FromCubicMetersPerDay(value);

        /// <inheritdoc cref="GasRate.FromCubicMetersPerDay(UnitsNet.QuantityValue)" />
        public static GasRate? CubicMetersPerDay(this float? value) => GasRate.FromCubicMetersPerDay(value);

        /// <inheritdoc cref="GasRate.FromCubicMetersPerDay(UnitsNet.QuantityValue)" />
        public static GasRate CubicMetersPerDay(this decimal value) => GasRate.FromCubicMetersPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="GasRate.FromCubicMetersPerDay(UnitsNet.QuantityValue)" />
        public static GasRate? CubicMetersPerDay(this decimal? value) => GasRate.FromCubicMetersPerDay(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region GigacubicFoot

        /// <inheritdoc cref="GasRate.FromGigacubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate GigacubicFeet(this int value) => GasRate.FromGigacubicFeet(value);

        /// <inheritdoc cref="GasRate.FromGigacubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate? GigacubicFeet(this int? value) => GasRate.FromGigacubicFeet(value);

        /// <inheritdoc cref="GasRate.FromGigacubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate GigacubicFeet(this long value) => GasRate.FromGigacubicFeet(value);

        /// <inheritdoc cref="GasRate.FromGigacubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate? GigacubicFeet(this long? value) => GasRate.FromGigacubicFeet(value);

        /// <inheritdoc cref="GasRate.FromGigacubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate GigacubicFeet(this double value) => GasRate.FromGigacubicFeet(value);

        /// <inheritdoc cref="GasRate.FromGigacubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate? GigacubicFeet(this double? value) => GasRate.FromGigacubicFeet(value);

        /// <inheritdoc cref="GasRate.FromGigacubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate GigacubicFeet(this float value) => GasRate.FromGigacubicFeet(value);

        /// <inheritdoc cref="GasRate.FromGigacubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate? GigacubicFeet(this float? value) => GasRate.FromGigacubicFeet(value);

        /// <inheritdoc cref="GasRate.FromGigacubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate GigacubicFeet(this decimal value) => GasRate.FromGigacubicFeet(Convert.ToDouble(value));

        /// <inheritdoc cref="GasRate.FromGigacubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate? GigacubicFeet(this decimal? value) => GasRate.FromGigacubicFeet(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region HectocubicMeterPerDay

        /// <inheritdoc cref="GasRate.FromHectocubicMetersPerDay(UnitsNet.QuantityValue)" />
        public static GasRate HectocubicMetersPerDay(this int value) => GasRate.FromHectocubicMetersPerDay(value);

        /// <inheritdoc cref="GasRate.FromHectocubicMetersPerDay(UnitsNet.QuantityValue)" />
        public static GasRate? HectocubicMetersPerDay(this int? value) => GasRate.FromHectocubicMetersPerDay(value);

        /// <inheritdoc cref="GasRate.FromHectocubicMetersPerDay(UnitsNet.QuantityValue)" />
        public static GasRate HectocubicMetersPerDay(this long value) => GasRate.FromHectocubicMetersPerDay(value);

        /// <inheritdoc cref="GasRate.FromHectocubicMetersPerDay(UnitsNet.QuantityValue)" />
        public static GasRate? HectocubicMetersPerDay(this long? value) => GasRate.FromHectocubicMetersPerDay(value);

        /// <inheritdoc cref="GasRate.FromHectocubicMetersPerDay(UnitsNet.QuantityValue)" />
        public static GasRate HectocubicMetersPerDay(this double value) => GasRate.FromHectocubicMetersPerDay(value);

        /// <inheritdoc cref="GasRate.FromHectocubicMetersPerDay(UnitsNet.QuantityValue)" />
        public static GasRate? HectocubicMetersPerDay(this double? value) => GasRate.FromHectocubicMetersPerDay(value);

        /// <inheritdoc cref="GasRate.FromHectocubicMetersPerDay(UnitsNet.QuantityValue)" />
        public static GasRate HectocubicMetersPerDay(this float value) => GasRate.FromHectocubicMetersPerDay(value);

        /// <inheritdoc cref="GasRate.FromHectocubicMetersPerDay(UnitsNet.QuantityValue)" />
        public static GasRate? HectocubicMetersPerDay(this float? value) => GasRate.FromHectocubicMetersPerDay(value);

        /// <inheritdoc cref="GasRate.FromHectocubicMetersPerDay(UnitsNet.QuantityValue)" />
        public static GasRate HectocubicMetersPerDay(this decimal value) => GasRate.FromHectocubicMetersPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="GasRate.FromHectocubicMetersPerDay(UnitsNet.QuantityValue)" />
        public static GasRate? HectocubicMetersPerDay(this decimal? value) => GasRate.FromHectocubicMetersPerDay(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region KilocubicFoot

        /// <inheritdoc cref="GasRate.FromKilocubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate KilocubicFeet(this int value) => GasRate.FromKilocubicFeet(value);

        /// <inheritdoc cref="GasRate.FromKilocubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate? KilocubicFeet(this int? value) => GasRate.FromKilocubicFeet(value);

        /// <inheritdoc cref="GasRate.FromKilocubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate KilocubicFeet(this long value) => GasRate.FromKilocubicFeet(value);

        /// <inheritdoc cref="GasRate.FromKilocubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate? KilocubicFeet(this long? value) => GasRate.FromKilocubicFeet(value);

        /// <inheritdoc cref="GasRate.FromKilocubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate KilocubicFeet(this double value) => GasRate.FromKilocubicFeet(value);

        /// <inheritdoc cref="GasRate.FromKilocubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate? KilocubicFeet(this double? value) => GasRate.FromKilocubicFeet(value);

        /// <inheritdoc cref="GasRate.FromKilocubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate KilocubicFeet(this float value) => GasRate.FromKilocubicFeet(value);

        /// <inheritdoc cref="GasRate.FromKilocubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate? KilocubicFeet(this float? value) => GasRate.FromKilocubicFeet(value);

        /// <inheritdoc cref="GasRate.FromKilocubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate KilocubicFeet(this decimal value) => GasRate.FromKilocubicFeet(Convert.ToDouble(value));

        /// <inheritdoc cref="GasRate.FromKilocubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate? KilocubicFeet(this decimal? value) => GasRate.FromKilocubicFeet(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region KilocubicMeterPerDay

        /// <inheritdoc cref="GasRate.FromKilocubicMetersPerDay(UnitsNet.QuantityValue)" />
        public static GasRate KilocubicMetersPerDay(this int value) => GasRate.FromKilocubicMetersPerDay(value);

        /// <inheritdoc cref="GasRate.FromKilocubicMetersPerDay(UnitsNet.QuantityValue)" />
        public static GasRate? KilocubicMetersPerDay(this int? value) => GasRate.FromKilocubicMetersPerDay(value);

        /// <inheritdoc cref="GasRate.FromKilocubicMetersPerDay(UnitsNet.QuantityValue)" />
        public static GasRate KilocubicMetersPerDay(this long value) => GasRate.FromKilocubicMetersPerDay(value);

        /// <inheritdoc cref="GasRate.FromKilocubicMetersPerDay(UnitsNet.QuantityValue)" />
        public static GasRate? KilocubicMetersPerDay(this long? value) => GasRate.FromKilocubicMetersPerDay(value);

        /// <inheritdoc cref="GasRate.FromKilocubicMetersPerDay(UnitsNet.QuantityValue)" />
        public static GasRate KilocubicMetersPerDay(this double value) => GasRate.FromKilocubicMetersPerDay(value);

        /// <inheritdoc cref="GasRate.FromKilocubicMetersPerDay(UnitsNet.QuantityValue)" />
        public static GasRate? KilocubicMetersPerDay(this double? value) => GasRate.FromKilocubicMetersPerDay(value);

        /// <inheritdoc cref="GasRate.FromKilocubicMetersPerDay(UnitsNet.QuantityValue)" />
        public static GasRate KilocubicMetersPerDay(this float value) => GasRate.FromKilocubicMetersPerDay(value);

        /// <inheritdoc cref="GasRate.FromKilocubicMetersPerDay(UnitsNet.QuantityValue)" />
        public static GasRate? KilocubicMetersPerDay(this float? value) => GasRate.FromKilocubicMetersPerDay(value);

        /// <inheritdoc cref="GasRate.FromKilocubicMetersPerDay(UnitsNet.QuantityValue)" />
        public static GasRate KilocubicMetersPerDay(this decimal value) => GasRate.FromKilocubicMetersPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="GasRate.FromKilocubicMetersPerDay(UnitsNet.QuantityValue)" />
        public static GasRate? KilocubicMetersPerDay(this decimal? value) => GasRate.FromKilocubicMetersPerDay(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region MegacubicFoot

        /// <inheritdoc cref="GasRate.FromMegacubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate MegacubicFeet(this int value) => GasRate.FromMegacubicFeet(value);

        /// <inheritdoc cref="GasRate.FromMegacubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate? MegacubicFeet(this int? value) => GasRate.FromMegacubicFeet(value);

        /// <inheritdoc cref="GasRate.FromMegacubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate MegacubicFeet(this long value) => GasRate.FromMegacubicFeet(value);

        /// <inheritdoc cref="GasRate.FromMegacubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate? MegacubicFeet(this long? value) => GasRate.FromMegacubicFeet(value);

        /// <inheritdoc cref="GasRate.FromMegacubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate MegacubicFeet(this double value) => GasRate.FromMegacubicFeet(value);

        /// <inheritdoc cref="GasRate.FromMegacubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate? MegacubicFeet(this double? value) => GasRate.FromMegacubicFeet(value);

        /// <inheritdoc cref="GasRate.FromMegacubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate MegacubicFeet(this float value) => GasRate.FromMegacubicFeet(value);

        /// <inheritdoc cref="GasRate.FromMegacubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate? MegacubicFeet(this float? value) => GasRate.FromMegacubicFeet(value);

        /// <inheritdoc cref="GasRate.FromMegacubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate MegacubicFeet(this decimal value) => GasRate.FromMegacubicFeet(Convert.ToDouble(value));

        /// <inheritdoc cref="GasRate.FromMegacubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate? MegacubicFeet(this decimal? value) => GasRate.FromMegacubicFeet(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region MegacubicMeterPerDay

        /// <inheritdoc cref="GasRate.FromMegacubicMetersPerDay(UnitsNet.QuantityValue)" />
        public static GasRate MegacubicMetersPerDay(this int value) => GasRate.FromMegacubicMetersPerDay(value);

        /// <inheritdoc cref="GasRate.FromMegacubicMetersPerDay(UnitsNet.QuantityValue)" />
        public static GasRate? MegacubicMetersPerDay(this int? value) => GasRate.FromMegacubicMetersPerDay(value);

        /// <inheritdoc cref="GasRate.FromMegacubicMetersPerDay(UnitsNet.QuantityValue)" />
        public static GasRate MegacubicMetersPerDay(this long value) => GasRate.FromMegacubicMetersPerDay(value);

        /// <inheritdoc cref="GasRate.FromMegacubicMetersPerDay(UnitsNet.QuantityValue)" />
        public static GasRate? MegacubicMetersPerDay(this long? value) => GasRate.FromMegacubicMetersPerDay(value);

        /// <inheritdoc cref="GasRate.FromMegacubicMetersPerDay(UnitsNet.QuantityValue)" />
        public static GasRate MegacubicMetersPerDay(this double value) => GasRate.FromMegacubicMetersPerDay(value);

        /// <inheritdoc cref="GasRate.FromMegacubicMetersPerDay(UnitsNet.QuantityValue)" />
        public static GasRate? MegacubicMetersPerDay(this double? value) => GasRate.FromMegacubicMetersPerDay(value);

        /// <inheritdoc cref="GasRate.FromMegacubicMetersPerDay(UnitsNet.QuantityValue)" />
        public static GasRate MegacubicMetersPerDay(this float value) => GasRate.FromMegacubicMetersPerDay(value);

        /// <inheritdoc cref="GasRate.FromMegacubicMetersPerDay(UnitsNet.QuantityValue)" />
        public static GasRate? MegacubicMetersPerDay(this float? value) => GasRate.FromMegacubicMetersPerDay(value);

        /// <inheritdoc cref="GasRate.FromMegacubicMetersPerDay(UnitsNet.QuantityValue)" />
        public static GasRate MegacubicMetersPerDay(this decimal value) => GasRate.FromMegacubicMetersPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="GasRate.FromMegacubicMetersPerDay(UnitsNet.QuantityValue)" />
        public static GasRate? MegacubicMetersPerDay(this decimal? value) => GasRate.FromMegacubicMetersPerDay(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region TeracubicFoot

        /// <inheritdoc cref="GasRate.FromTeracubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate TeracubicFeet(this int value) => GasRate.FromTeracubicFeet(value);

        /// <inheritdoc cref="GasRate.FromTeracubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate? TeracubicFeet(this int? value) => GasRate.FromTeracubicFeet(value);

        /// <inheritdoc cref="GasRate.FromTeracubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate TeracubicFeet(this long value) => GasRate.FromTeracubicFeet(value);

        /// <inheritdoc cref="GasRate.FromTeracubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate? TeracubicFeet(this long? value) => GasRate.FromTeracubicFeet(value);

        /// <inheritdoc cref="GasRate.FromTeracubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate TeracubicFeet(this double value) => GasRate.FromTeracubicFeet(value);

        /// <inheritdoc cref="GasRate.FromTeracubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate? TeracubicFeet(this double? value) => GasRate.FromTeracubicFeet(value);

        /// <inheritdoc cref="GasRate.FromTeracubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate TeracubicFeet(this float value) => GasRate.FromTeracubicFeet(value);

        /// <inheritdoc cref="GasRate.FromTeracubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate? TeracubicFeet(this float? value) => GasRate.FromTeracubicFeet(value);

        /// <inheritdoc cref="GasRate.FromTeracubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate TeracubicFeet(this decimal value) => GasRate.FromTeracubicFeet(Convert.ToDouble(value));

        /// <inheritdoc cref="GasRate.FromTeracubicFeet(UnitsNet.QuantityValue)" />
        public static GasRate? TeracubicFeet(this decimal? value) => GasRate.FromTeracubicFeet(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

    }
}
#endif
